
{% extends 'base-dashboard.html.twig' %}

{% block title %}Settings{% endblock %}


{% block sidemenu %}

    <div class="btn-group-vertical d-block" role="group" aria-label="Vertical button group">
        <a class="btn btn-dark btn-sm p-2 text-start" href="/dashboard">{% trans %}Return{% endtrans %}</a>
    </div>

{% endblock %}


{% block body %}

<h1>{% trans %}Files manager{% endtrans %}</h1>
<hr>

<div class="my-4">

    <input type="file" name="file" id="file" class="d-none">

    <div class="upload-area card p-5 text-secondary" id="drop-area">

        <div class="upload-trigger text-center my-5">
            <p><b class="fs-6"><i class="fa-solid fa-cloud-arrow-up fa-4x"></i><br><span id="drag-text">{% trans %}Drag files here{% endtrans %}</span></b></p>
            <div class="mt-3">
            <label class="btn btn-secondary btn-sm small">{% trans %}or select files to upload{% endtrans %}</label>
            </div>
        </div>

        <div id="drop-queue" class="row"></div>

    </div>

</div>


<script>

// **************************************************************************
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Drag and drop HTML5 AJAX files uploader
// Â© 2022 Janusz Kubala
// Version 1.0b
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// **************************************************************************

let dropArea = document.getElementById("drop-area")
let dragText = document.getElementById("drag-text")
let dropQueue = document.getElementById("drop-queue")

dropArea.addEventListener("dragover", (e)=>{
    e.preventDefault()
    dropArea.classList.add("active")
    dragText.textContent = "{% trans %}Release files here to upload{% endtrans %}";
})

dropArea.addEventListener("dragleave", ()=>{
    dropArea.classList.remove("active")
    dragText.textContent = "{% trans %}Drag files here{% endtrans %}";
})

dropArea.addEventListener("drop", (e)=>{
    e.preventDefault()
    
    const files = e.dataTransfer.files
    const filesArray = Array.from(files)

    filesArray.forEach(file => {

        addFile(file, dropQueue)

    })

})

// Function to truncate long strings keeping leading and trailing chunks
// with ellipsis in between

function truncate(string, maxLength, separator) {

    if (string.length <= maxLength) {
        return string
    }

    separator = separator || '...'
    
    let separatorLength = separator.length,
        charsToShow = maxLength - separatorLength,
        frontChars = Math.ceil(charsToShow/2),
        rearChars = Math.floor(charsToShow/2)
    
    return string.substr(0, frontChars) + 
           separator + 
           string.substr(string.length - rearChars)
    
}

function addFile(file, dropQueue) {

    let extensions = {
        "image/jpeg": "jpg",
        "image/png": "png",
        "image/gif": "gif",
        "application/pdf": "pdf"

    }

    if(typeof extensions[file.type] !== "undefined") {

        let assetsIconsDir = "{{ asset('img/icons/extensions/')}}"
        let assetsLogosDir = "{{ asset('img/logos/integrations/')}}"
        let extension = extensions[file.type]

        // Build DOM elements for each file
        let fileItem = document.createElement("div")
        fileItem.classList.add("file-item", "col-3", "text-center", "position-relative")
        let fileIcon = document.createElement("img")
        fileIcon.classList.add("mb-3")
        fileIcon.style.height = "8em"
        fileIcon.src = assetsIconsDir + extension + ".svg"
        fileIcon.alt = ""
        let fileProgress = document.createElement("div")
        fileProgress.classList.add("progress", "mb-3")
        fileProgress.style.height = "1em"
        let fileProgressBar = document.createElement("div")
        fileProgressBar.classList.add("progress-bar")
        let fileName = document.createElement("div")
        fileName.classList.add("small", "text-muted")
        fileName.innerText = truncate(file.name, 25)

        fileItem.appendChild(fileIcon)
        fileItem.appendChild(fileProgress)
        fileProgress.appendChild(fileProgressBar)
        fileItem.appendChild(fileName)
        dropQueue.appendChild(fileItem)

        let formData = new FormData()
        formData.append("file", file)

        let request = new XMLHttpRequest()
        request.open("POST", "/file/upload")
        request.upload.addEventListener("progress", function(e) {
            
            let percentTotal = (e.loaded / e.total) * 100
            fileProgressBar.style.width = percentTotal + "%"
            
        })
        request.addEventListener("load", function(e) {

            let image = JSON.parse(request.response)

            // If it's an image, display the thumbnail
            if((image.mimeType).startsWith("image/") === true) {
                
                // If it is a local file
                if(image.source == "local_cdn") {
                    let localCDNDir = "{{ asset('cdn/')}}"
                    fileIcon.src = localCDNDir + image.fileName + "_thumb." + image.extension
                    fileIcon.classList.add("rounded")
                }

            }

            let cdnIcon = document.createElement("img")
            cdnIcon.classList.add("position-absolute", "cdn-provider", "bg-light", "rounded", "p-1", "border")
            cdnIcon.src = assetsLogosDir + "480x240-amazon-web-services.svg"
            fileItem.appendChild(cdnIcon)

        })
        request.send(formData)

    }

}

</script>

{% endblock %}